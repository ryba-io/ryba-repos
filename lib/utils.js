// Generated by CoffeeScript 1.9.0
var exec, url;

url = require('url');

exec = require('child_process').exec;

exports.build_assets = function(repo, config) {
  var buf, element, key, path, repopath, url_name, url_path, _results;
  url_path = url.parse(repo.url).pathname;
  url_name = url_path.split('/');
  url_name = url_name[url_name.length - 1];
  repopath = dirpath + "/" + repo.name;
  buf = '#!/bin/bash\n';
  buf += 'set -e\n\n';
  buf += 'yum clean expire-cache\n';
  buf += "wget -nv " + repo.url + " -O /etc/yum.repos.d/" + url_name + "\n";
  buf += 'yum update -y\n';
  _results = [];
  for (key in config) {
    element = config[key];
    path = url.parse(config[element].baseurl).pathname;
    buf += "\n# [" + element + "]\n";
    buf += "mkdir -p /var/ryba" + path + "\n";
    buf += "reposync -p /var/ryba" + path + " --repoid=" + element + "\n";
    _results.push(buf += "createrepo /var/ryba" + path + "\n");
  }
  return _results;
};

exports.docker_exec = function(repo, action, callback) {
  return exec("if command -v boot2docker; then boot2docker up && $(boot2docker shellinit); fi\ndocker " + action + " " + repo, callback);
};

exports.docker_run = function(repo, pubdir, callback) {
  return exec("if command -v boot2docker; then boot2docker up && $(boot2docker shellinit); fi\ndocker run -d --name=" + repo.name + " -v " + pubdir + "/" + repo.name + ":/usr/local/apache2/htdocs/ -p " + repo.port + ":80 httpd", callback);
};

exports.docker_ps = function(obj, callback) {
  if (arguments.length === 1) {
    callback = obj;
    obj = false;
  }
  return exec("docker ps -a", function(err, stdout, stderr) {
    var column, column_length, column_names, from, i, info, infos, line, match, re, _, _i, _j, _len, _len1, _ref;
    if (err) {
      return callback(err);
    }
    column_names = [];
    column_length = [];
    infos = {};
    _ref = exports.lines(stdout);
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      line = _ref[i];
      if (/^\s*$/.test(line)) {
        continue;
      }
      if (i === 0) {
        re = /(\w+\s+|\w+$)/mg;
        while (match = re.exec(line)) {
          column_names.push(match[1].trim().toLowerCase());
          column_length.push(match[1].length);
        }
        continue;
      }
      from = 0;
      info = {};
      for (i = _j = 0, _len1 = column_names.length; _j < _len1; i = ++_j) {
        column = column_names[i];
        info[column] = i !== column_names.length - 1 ? line.substr(from, column_length[i]).trim() : line.substr(from).trim();
        from += column_length[i];
      }
      infos[info.names] = info;
    }
    if (!obj) {
      infos = (function() {
        var _results;
        _results = [];
        for (_ in infos) {
          info = infos[_];
          _results.push(info);
        }
        return _results;
      })();
    }
    return callback(null, infos);
  });
};

exports.lines = function(str) {
  return str.split(/\r\n|[\n\r\u0085\u2028\u2029]/g);
};
