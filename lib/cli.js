// Generated by CoffeeScript 1.9.1
var args, i, name, parameters, params, port, repo, repos, url, util;

util = require('util');

parameters = require('parameters');

repos = require('./repos');

params = parameters({
  name: 'repos',
  description: 'Install and sync RHEL/CentOS repositories',
  options: [
    {
      name: 'output',
      shortcut: 'o',
      description: 'Directory storing the repository files.'
    }, {
      name: 'debug',
      shortcut: 'd',
      type: 'boolean',
      description: 'Directory storing the repository files.'
    }
  ],
  commands: [
    {
      name: 'list',
      description: 'list all the installed repositories',
      options: [
        {
          name: 'repo',
          type: 'array',
          shortcut: 'r',
          description: 'repo name filter(s)'
        }
      ]
    }, {
      name: 'sync',
      description: 'initialize local repo with Docker container',
      options: [
        {
          name: 'repo',
          type: 'array',
          shortcut: 'r',
          required: true,
          description: 'Repositories to initialize'
        }, {
          name: 'url',
          type: 'array',
          shortcut: 'u',
          required: false,
          description: 'URLs of the repositories'
        }, {
          name: 'port',
          shortcut: 'p',
          type: 'array',
          description: 'Default port value'
        }
      ]
    }, {
      name: 'start',
      description: 'Start Repo server(s) with Docker',
      options: [
        {
          name: 'repo',
          type: 'array',
          shortcut: 'r',
          description: 'Repositories to start. All by default'
        }, {
          name: 'port',
          shortcut: 'p',
          type: 'array',
          description: 'force port value'
        }
      ]
    }, {
      name: 'stop',
      description: 'Stop Repo server(s) with Docker',
      options: [
        {
          name: 'repo',
          type: 'array',
          shortcut: 'r',
          description: 'Repositories to stop. All by default'
        }
      ]
    }, {
      name: 'remove',
      description: 'Delete a repo',
      options: [
        {
          name: 'repo',
          shortcut: 'r',
          type: 'array',
          required: true,
          description: 'Repositories to delete from docker'
        }, {
          name: 'purge',
          shortcut: 'p',
          type: 'boolean',
          description: 'Remove the repository files'
        }
      ]
    }
  ]
});

args = params.parse();

switch (args.command) {
  case 'help':
    console.log(params.help(args.name));
    break;
  case 'list':
    repos(args).list(args.repo, function(err, repos) {
      var j, len, repo, results;
      if (err) {
        return console.log(err);
      }
      results = [];
      for (j = 0, len = repos.length; j < len; j++) {
        repo = repos[j];
        process.stdout.write(repo.name);
        process.stdout.write(" [" + repo.port + "]");
        if (repo.docker.status) {
          process.stdout.write(" " + repo.docker.status);
        }
        if (!repo.docker.status) {
          process.stdout.write(" Not registered");
        }
        results.push(process.stdout.write('\n'));
      }
      return results;
    });
    break;
  case 'sync':
    repo = args.repo, url = args.url, port = args.port;
    if (url == null) {
      url = [];
    }
    if (url.length && repo.length !== url.length) {
      throw Error("Incoherent Arguments Length");
    }
    repo = (function() {
      var j, len, results;
      results = [];
      for (i = j = 0, len = repo.length; j < len; i = ++j) {
        name = repo[i];
        results.push({
          name: name,
          url: url[i],
          port: port[i]
        });
      }
      return results;
    })();
    repos(args).sync(repo, function(err) {
      if (err) {
        return console.log(err);
      }
    });
    break;
  case 'start':
    repo = args.repo, port = args.port;
    if (repo == null) {
      repo = [];
    }
    if (port == null) {
      port = [];
    }
    if (port.length && repo.length !== port.length) {
      throw Error("Incoherent Arguments Length");
    }
    repo = (function() {
      var j, len, results;
      results = [];
      for (i = j = 0, len = repo.length; j < len; i = ++j) {
        name = repo[i];
        results.push({
          name: name,
          port: port[i]
        });
      }
      return results;
    })();
    repos(args).start(repo, function(err) {
      if (err) {
        return console.log(err);
      }
    });
    break;
  case 'stop':
    repos(args).stop(args.repo, function(err) {
      if (err) {
        return console.log(err);
      }
    });
    break;
  case 'remove':
    repos(args).remove(args.repo, function(err) {
      if (err) {
        return console.log(err);
      }
    });
}
